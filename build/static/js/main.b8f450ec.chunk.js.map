{"version":3,"sources":["TodoList.js","TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","react_default","a","createElement","react","mdbreact_esm","outline","color","onClick","this","props","addItem","icon","className","removeItem","clearAll","Component","TodoItems","todoEntries","entries","i","listItems","map","item","index","key","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputElement","React","createRef","e","preventDefault","setState","items","state","pop","currentArray","newItem","currentItem","push","newArray","Date","now","fluid","center","size","src_TodoList","src_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8f450ec.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { MDBBtn, MDBIcon } from \"mdbreact\";\n\nclass TodoList extends Component {\n\n\n  render() {\n    return (\n      <Fragment>\n            <MDBBtn outline color='primary' onClick={this.props.addItem}>\n              <MDBIcon icon=\"plus-square\" className=\"fa-lg mr-2 green-text\"/> Add\n            </MDBBtn>\n            <MDBBtn outline color='orange' onClick={this.props.removeItem}>\n            <MDBIcon icon=\"minus-square\" className=\"fa-lg mr-2 pink-text\"/> Remove\n            </MDBBtn>\n            <MDBBtn outline color='danger' onClick={this.props.clearAll}>\n            <MDBIcon icon=\"trash-alt\" className=\"fa-lg mr-2 red-text\"/> Clear\n            </MDBBtn>\n      </Fragment>\n    )\n  }\n}\n\nexport default TodoList","import React, { Component } from 'react';\nimport { MDBListGroup, MDBListGroupItem } from \"mdbreact\";\n\nclass TodoItems extends Component {\n\n  render() {\n    const todoEntries = this.props.entries;\n\n    let i = 0;\n\n    const listItems = todoEntries.map((item, index) => {\n      return (\n        <MDBListGroupItem key={item.key} index={index} className=\"mb-1\">\n          Task number {i++}\n        </MDBListGroupItem>\n      )\n    })\n\n    return <MDBListGroup className=\"theList\">{listItems}</MDBListGroup>\n  }\n}\n\nexport default TodoItems","import React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nimport './App.css'\nimport TodoList from './TodoList'\nimport TodoItems from './TodoItems'\n\nclass App extends Component {\n  inputElement = React.createRef()\n  constructor() {\n    super()\n    this.state = {\n      items: [],\n      currentItem: {\n        key: '',\n      },\n    }\n  }\n\n  clearAll = e => {\n    e.preventDefault();\n    this.setState({\n      items: [],\n    })\n  }\n\n  removeItem = e => {\n    e.preventDefault();\n\n    this.state.items.pop();\n    const currentArray = this.state.items\n\n    this.setState({\n      items: currentArray,\n    })\n  }\n\n  addItem = e => {\n    e.preventDefault()\n    const newItem = this.state.currentItem;\n\n    this.state.items.push(newItem);\n    const newArray = this.state.items\n\n    this.setState({\n      items: newArray,\n      currentItem: {key: Date.now()}\n    })\n  }\n\n  render() {\n    return (\n      <MDBContainer fluid className=\"App heavy-rain-gradient\">\n        <MDBRow center >\n          <MDBCol size=\"4\" className=\"mt-5\">\n            <TodoList\n              addItem={this.addItem}\n              removeItem={this.removeItem}\n              clearAll={this.clearAll}\n\n            />\n            </MDBCol>\n          </MDBRow>\n        <MDBRow center className=\"mt-5\">\n          <MDBCol size=\"4\" className=\" mb-5\">\n            <TodoItems entries={this.state.items} />\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}